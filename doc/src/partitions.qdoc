/****************************************************************************
**
** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\page partitions.html
\title Partitions

\section1 Introduction

JSON DB may be configured as a number of partitions, each with its
own unique name. All operations in JSON DB operate on exactly one partition at
a time.

\section1 Accessing Partitions

The various partitions in a set are accessed via the \l {Partition} element in QML. In
C++, the partition is selected by \c setPartition() on a
\l {QJsonDbReadRequest}, \l {QJsonDbWriteRequest} or \l {QJsonDbWatcher}.

\section1 Defining Partitions

Partitions in JSON DB are defined via .json files. The filenames must be of the
form \c partitions*.json. JSON DB searches a series of directories looking for
such files and the search order is defined as follows:

\list
\li If -config-path <PATH> is passed as an argument to the JSON DB binary
(jsondb) then this location is searched.
\li If the above argument is not provided, JSON DB searches the colon-separated
list of directories specified by the JSONDB_CONFIG_SEARCH_PATH environment variable
if it's defined.
\li If neither of these above options are used, the current working directory and
/etc/jsondb are searched.
\endlist

The partition definition files consist of an array of objects which define the
partitions:
\code
[
  {
    "name" : "com.qt-project.partition1",
    "default" : true
  },
  {
    "name" : "com.qt-project.partition2",
    "path" : "/var/run/jsondb/partition2"
  }
]
\endcode

The allowed properties:

\table
\row

\row
\li name
\li The name of the partition, specified on all requests to the database.
If more than one partition specifies the same \c name property, JSON DB
only loads the first one it finds. See \l {Partition::name} and
\l {QJsonDbRequest::partition}.

\row
\li path
\li The path where the partition files should be stored. If not specified, it
defaults to the current working directory.

\row
\li default
\li If this boolean property is \c true, then requests which do not specify
a partition will default this partition. If more than one partition is marked
as default, JSON DB chooses one arbitrarily.
\endtable

If no partitions.json files are created, then the database defaults to a single
partition with the name "default".

\section1 The Ephemeral Partition

JSON DB offers a partition called \c Ephemeral. Objects written to this
partition are not persistent, but rather stored entirely in memory. The
entire partition is cleared every time the database server is restarted. This
partition can be very useful for storing frequently updated data since it does not
cause any disk I/O.

\code
QJsonDbReadRequest *request = new QJsonDbReadRequest(this);
request->setQuery("[?_type=\"Status\"]");
request->setPartition("Ephemeral");
\endcode

*/
